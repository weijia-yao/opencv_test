#!/usr/bin/env python
PACKAGE = "opencv_test"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("search_scale",     double_t, 0, "search scale factor",         1.1,  1.1,   2)
gen.add("min_neigh",     int_t, 0, "minimum neighbours",         3,   0,   20)
gen.add("canny_enable",     bool_t, 0, "Canny edge detector enable?",      True)
gen.add("min_img_size", int_t, 0, "minimum image size for detection",     0, 0,   100)



haar_enum = gen.enum([ gen.const("Default", str_t,
                                        "/usr/share/opencv/haarcascades/haarcascade_frontalface_default.xml",
                                        "Stump-based 24x24 discrete adaboost frontal face detector"),
                       gen.const("Alt2", str_t,
                                        "/usr/share/opencv/haarcascades/haarcascade_frontalface_alt2.xml",
                                        "Tree-based 20x20 gentle adaboost frontal face detector"),
                       gen.const("Alt_tree", str_t,
                                        "/usr/share/opencv/haarcascades/haarcascade_frontalface_alt_tree.xml",
                                        "Stump-based 20x20 gentle adaboost frontal face detector.  This detector uses tree of stage classifiers instead of a cascade"    ),
                       gen.const("Alt", str_t,
                                        "/usr/share/opencv/haarcascades/haarcascade_frontalface_alt.xml",
                                        "Stump-based 20x20 gentle adaboost frontal face detector")],
                       "An enum to specify which harrcascade classifier to use")

gen.add("Classifier", str_t, 0, "Which haar classifier cascade to use",
                                "/usr/share/opencv/haarcascades/haarcascade_frontalface_default.xml",
                                edit_method=haar_enum)

exit(gen.generate(PACKAGE, "face_detection", "FaceDetection"))
# The second parameter is the name of a node this could run in (used to generate documentation only), 
# the third parameter is a name prefix the generated files will get(e.g. "<name>Config.h" for c++, or "<name>Config.py" for python.




### Haar cascade face detection methods:
# 1. Default:       Stump-based 24x24 discrete(?) adaboost frontal face detector
# 2. Alt2:          Tree-based 20x20 gentle adaboost frontal face detector
# 3. Alt_tree:      Stump-based 20x20 gentle adaboost frontal face detector.
#                   This detector uses tree of stage classifiers instead of a cascade
# 4. Alt:           Stump-based 20x20 gentle adaboost frontal face detector

